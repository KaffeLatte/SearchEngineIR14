/*  
 *   This file is part of the computer assignment for the
 *   Information Retrieval course at KTH.
 * 
 *   First version:  Johan Boye, 2010
 *   Second version: Johan Boye, 2012
 *   Additions: Hedvig Kjellström, 2012-14
 */

package ir;

import java.io.File;
import java.io.FileInputStream;
import java.io.FileNotFoundException;
import java.io.FileOutputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.io.ObjectOutputStream;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.Iterator;
import java.util.LinkedList;

/**
 * Implements an inverted index as a Hashtable from words to PostingsLists.
 */
public class HashedIndex implements Index {

	/** The index as a hashtable. */
	private HashMap<String, PostingsList> index = new HashMap<String, PostingsList>();
	private HashMap<String, Integer> docLengths = new HashMap<String, Integer>();

	// Strängen under måste sluta på '/'
	String directoryPath = "/tmp/eaalto/savedIndex/";
	int totalNumberOfDocuments = 0;
	int docLengthCounter = 0;
	int oldDocID = -1;

	/**
	 * Inserts this token in the index.
	 */
	@Override
	public void insert(String token, int docID, int offset) {
		//
		// YOUR CODE HERE
		//
		docCount(docID);

		PostingsEntry myPostingsEntry = new PostingsEntry(docID, offset);
		PostingsList myPostingsList;

		if (index.containsKey(token)) {
			myPostingsList = index.get(token);
			myPostingsList.insert(myPostingsEntry);
		} else {
			myPostingsList = new PostingsList(myPostingsEntry);
			index.put(token, myPostingsList);
		}
	}

	private void docCount(int docID) {
		if (oldDocID == -1) {
			oldDocID = docID;
			docLengthCounter++;
			totalNumberOfDocuments++;
		}

		if (oldDocID == docID) {
			docLengthCounter++;
		} else {
			docLengths.put(Integer.toString(oldDocID), docLengthCounter);
			oldDocID = docID;
			docLengthCounter = 1;
			totalNumberOfDocuments++;
		}
	}

	/**
	 * Returns all the words in the index.
	 */
	@Override
	public Iterator<String> getDictionary() {
		//
		// REPLACE THE STATEMENT BELOW WITH YOUR CODE
		//
		return index.keySet().iterator();
	}

	/**
	 * Returns the postings for a specific term, or null if the term is not in
	 * the index.
	 */
	@Override
	public PostingsList getPostings(String token) {
		//
		// REPLACE THE STATEMENT BELOW WITH YOUR CODE
		//

		return index.get(token);
	}

	/**
	 * Searches the index for postings matching the query.
	 */
	@Override
	public PostingsList search(Query query, int queryType, int rankingType,
			int structureType) {
		//
		// REPLACE THE STATEMENT BELOW WITH YOUR CODE
		//

		long startTime = System.nanoTime();

		System.out.println("------------------");
		System.out.println("# of unique elements in index " + index.size());
		System.out.println("------------------");

		if (queryType == 0) {
			System.out.println("Time of execution (nanoseconds): "
					+ (System.nanoTime() - startTime));
			return intersectionQuery(query);
		}
		if (queryType == 1) {
			System.out.println("Time of execution (nanoseconds): "
					+ (System.nanoTime() - startTime));
			return phraseQuery(query);
		}

		return null;

	}

	private PostingsList phraseQuery(Query query) {
		// Gör om queries till en länkad lista med strängar
		LinkedList<String> queries = query.terms;

		// Skapa en ArrayList med alla träffar
		ArrayList<PostingsList> queryResponses = new ArrayList<PostingsList>();
		for (String s : queries) {
			PostingsList tmpList = getPostings(s);
			if (tmpList == null) {
				getPostingsListFromFile(s);
				tmpList = getPostings(s);
			}

			queryResponses.add(tmpList);
		}

		PostingsList answer = queryResponses.get(0);
		queryResponses.remove(0);

		Integer distance = 1;
		while (queryResponses.size() != 0) {
			answer = positionalIntersect(answer, queryResponses.get(0),
					distance);
			queryResponses.remove(0);
			distance++;
		}

		return answer;
	}

	private PostingsList positionalIntersect(PostingsList p1, PostingsList p2,
			int distance) {
		PostingsList intersectedList = new PostingsList();

		// System.out.println("Inne i positional intersect");

		int p1index = 0;
		int p2index = 0;

		PostingsEntry tmp1;
		PostingsEntry tmp2;

		while (p1index < p1.size() && p2index < p2.size()) {
			// System.out.println("Inne i while");
			tmp1 = p1.get(p1index);
			tmp2 = p2.get(p2index);

			if (tmp1.docID == tmp2.docID) {
				LinkedList<Integer> p1Offsets = tmp1.getOffsets();
				LinkedList<Integer> p2Offsets = tmp2.getOffsets();

				outerloop: for (int i = 0; i < p1Offsets.size(); i++) {
					for (int j = 0; j < p2Offsets.size(); j++) {
						if (p2Offsets.get(j) - p1Offsets.get(i) == distance) {
							intersectedList.insert(tmp1);
							break outerloop;
						}
					}
				}
				p1index++;
				p2index++;

			} else {
				if (tmp1.docID < tmp2.docID) {
					p1index++;
				} else {
					p2index++;
				}
			}

		}
		return intersectedList;
	}

	private PostingsList intersectionQuery(Query query) {

		// Gör om queries till en länkad lista med strängar
		LinkedList<String> queries = query.terms;

		// Skapa en ArrayList med alla träffar
		ArrayList<PostingsList> queryResponses = new ArrayList<PostingsList>();
		for (String s : queries) {
			PostingsList tmpList = getPostings(s);
			if (tmpList == null) {
				getPostingsListFromFile(s);
				tmpList = getPostings(s);
			}

			queryResponses.add(tmpList);
		}

		// Sortera efter antal element
		// Collections.sort(queryResponses, new Comparator<PostingsList>() {
		// @Override
		// public int compare(PostingsList p1, PostingsList p2) {
		// return p2.size() - p1.size();
		// }
		// });
		// Collections.reverse(queryResponses);

		PostingsList answer = queryResponses.get(0);
		queryResponses.remove(0);

		while (queryResponses.size() != 0) {
			answer = intersect(answer, queryResponses.get(0));
			queryResponses.remove(0);
		}

		return answer;
	}

	private PostingsList intersect(PostingsList p1, PostingsList p2) {

		PostingsList intersectedList = new PostingsList();

		int p1index = 0;
		int p2index = 0;

		while (p1index < p1.size() && p2index < p2.size()) {
			PostingsEntry tmp1 = p1.get(p1index);
			PostingsEntry tmp2 = p2.get(p2index);

			if (tmp1.docID == tmp2.docID) {
				intersectedList.insert(p1.get(p1index));
				p1index++;
				p2index++;
			} else {
				if (p1.get(p1index).docID < p2.get(p2index).docID) {
					p1index++;
				} else {
					p2index++;
				}

			}
		}

		return intersectedList;
	}

	private void getPostingsListFromFile(String token) {
		String firstLetterOfToken = String.valueOf(token.charAt(0));
		try {
			FileInputStream fis = new FileInputStream(directoryPath
					+ firstLetterOfToken + "/" + token);
			ObjectInputStream ois = new ObjectInputStream(fis);
			PostingsList injectIntoHashMap = (PostingsList) ois.readObject();
			index.put(token, injectIntoHashMap);
		} catch (FileNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (IOException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} catch (ClassNotFoundException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
	}

	/**
	 * No need for cleanup in a HashedIndex.
	 */
	@Override
	public void cleanup() {
		for (String key : index.keySet()) {
			try {
				if (key.length() < 1) {
					continue;
				}
				String newDirectoryName = String.valueOf(key.charAt(0));
				new File(directoryPath + newDirectoryName).mkdir();

				FileOutputStream fout = new FileOutputStream(directoryPath
						+ newDirectoryName + "/" + key);
				ObjectOutputStream oos = new ObjectOutputStream(fout);
				oos.writeObject(getPostings(key));
				fout.close();
				oos.close();
			} catch (FileNotFoundException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			} catch (IOException e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}
	}

}

